name: Compile LaTeX to PDF

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering from GitHub UI

# Permissions for the `GITHUB_TOKEN`
permissions:
  contents: write # Required for pushing commits
  pull-requests: write # Required for creating pull requests

jobs:
  compile-latex:
    runs-on: ubuntu-latest
    container:
      image: danteev/texlive # Pre-built image with LaTeX installed

    steps:
      # Step 1: Check if curl is available
      - name: Check if curl is available
        run: |
          if ! command -v curl &> /dev/null; then
            apt-get update && apt-get install -y curl
          else
            echo "curl is already installed!"
          fi

      - name: Checkout repository
        uses: actions/checkout@v4.2.1
        
      - name: Check for [ci skip] in commit message
        id: check_skip
        run: |
          if git log -1 --pretty=%B | grep -q '\[ci skip\]'; then
            echo "Commit message contains [ci skip], skipping workflow."
            exit 0
          else
            echo "No [ci skip] found in commit message, continuing workflow."
          fi

      - name: Print working directory (debug step)
        if: steps.check_skip.outcome != 'success'
        run: |
          echo "Current working directory:"
          pwd
          echo "Listing directory contents:"
          ls -la

      - name: Mark the working directory as safe for Git
        if: steps.check_skip.outcome != 'success'
        run: |
          git config --global --add safe.directory $(pwd)

      - name: Find and compile .tex files
        if: steps.check_skip.outcome != 'success'
        run: |
          # Find all .tex files and compile them to PDFs
          # Has relative path issues running from root level for tex in folders
          # find . -maxdepth 2 -name "cv-*.tex" | while IFS= read -r file; do
          #   echo "Compiling $file to PDF"
          #   pdflatex "$file"
          # done
          pdflatex cv-peramsathyam-base.tex

      - name: Set up Git configuration
        if: steps.check_skip.outcome != 'success'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Create and push changes to a new branch
        id: create_branch
        if: steps.check_skip.outcome != 'success'
        run: |
          # Generate a new branch name based on commit SHA or run number to avoid conflicts
          BRANCH_NAME="pdf-update-${{ github.run_number }}-${{ github.sha }}"

          # Create and push the new branch
          git checkout -b $BRANCH_NAME
          git add *.pdf
          git commit -m "Add/Update PDFs compiled from LaTeX files [ci skip]"
          git push origin $BRANCH_NAME

          # Expose branch name for future steps
          # echo "::set-output name=branch_name::$BRANCH_NAME"
          # https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/
          # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions#example-of-setting-an-output-parameter
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Create Pull Request using GitHub API
        if: steps.check_skip.outcome != 'success'
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d @- << EOF
          {
            "title": "Update PDFs from LaTeX compilation",
            "head": "${{ steps.create_branch.outputs.branch_name }}",
            "base": "main",
            "body": "This PR contains the compiled PDFs from the LaTeX files in the repository."
          }
          EOF
